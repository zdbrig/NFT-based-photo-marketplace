// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddReputation extends ethereum.Event {
  get params(): AddReputation__Params {
    return new AddReputation__Params(this);
  }
}

export class AddReputation__Params {
  _event: AddReputation;

  constructor(event: AddReputation) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reputationCount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PhotoNFTCreated extends ethereum.Event {
  get params(): PhotoNFTCreated__Params {
    return new PhotoNFTCreated__Params(this);
  }
}

export class PhotoNFTCreated__Params {
  _event: PhotoNFTCreated;

  constructor(event: PhotoNFTCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get photoNFT(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftName(): string {
    return this._event.parameters[2].value.toString();
  }

  get nftSymbol(): string {
    return this._event.parameters[3].value.toString();
  }

  get photoPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get ipfsHashOfPhoto(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class PhotoNFTFactory extends ethereum.SmartContract {
  static bind(address: Address): PhotoNFTFactory {
    return new PhotoNFTFactory("PhotoNFTFactory", address);
  }

  photoAddresses(param0: BigInt): Address {
    let result = super.call(
      "photoAddresses",
      "photoAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_photoAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "photoAddresses",
      "photoAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  photoNFTData(): Address {
    let result = super.call("photoNFTData", "photoNFTData():(address)", []);

    return result[0].toAddress();
  }

  try_photoNFTData(): ethereum.CallResult<Address> {
    let result = super.tryCall("photoNFTData", "photoNFTData():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  photoNFTMarketplace(): Address {
    let result = super.call(
      "photoNFTMarketplace",
      "photoNFTMarketplace():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_photoNFTMarketplace(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "photoNFTMarketplace",
      "photoNFTMarketplace():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createNewPhotoNFT(
    nftName: string,
    nftSymbol: string,
    photoPrice: BigInt,
    ipfsHashOfPhoto: string
  ): boolean {
    let result = super.call(
      "createNewPhotoNFT",
      "createNewPhotoNFT(string,string,uint256,string):(bool)",
      [
        ethereum.Value.fromString(nftName),
        ethereum.Value.fromString(nftSymbol),
        ethereum.Value.fromUnsignedBigInt(photoPrice),
        ethereum.Value.fromString(ipfsHashOfPhoto)
      ]
    );

    return result[0].toBoolean();
  }

  try_createNewPhotoNFT(
    nftName: string,
    nftSymbol: string,
    photoPrice: BigInt,
    ipfsHashOfPhoto: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "createNewPhotoNFT",
      "createNewPhotoNFT(string,string,uint256,string):(bool)",
      [
        ethereum.Value.fromString(nftName),
        ethereum.Value.fromString(nftSymbol),
        ethereum.Value.fromUnsignedBigInt(photoPrice),
        ethereum.Value.fromString(ipfsHashOfPhoto)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  baseTokenURI(): string {
    let result = super.call("baseTokenURI", "baseTokenURI():(string)", []);

    return result[0].toString();
  }

  try_baseTokenURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseTokenURI", "baseTokenURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getTokenURI(_ipfsHashOfPhoto: string): string {
    let result = super.call("getTokenURI", "getTokenURI(string):(string)", [
      ethereum.Value.fromString(_ipfsHashOfPhoto)
    ]);

    return result[0].toString();
  }

  try_getTokenURI(_ipfsHashOfPhoto: string): ethereum.CallResult<string> {
    let result = super.tryCall("getTokenURI", "getTokenURI(string):(string)", [
      ethereum.Value.fromString(_ipfsHashOfPhoto)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _photoNFTMarketplace(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _photoNFTData(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateNewPhotoNFTCall extends ethereum.Call {
  get inputs(): CreateNewPhotoNFTCall__Inputs {
    return new CreateNewPhotoNFTCall__Inputs(this);
  }

  get outputs(): CreateNewPhotoNFTCall__Outputs {
    return new CreateNewPhotoNFTCall__Outputs(this);
  }
}

export class CreateNewPhotoNFTCall__Inputs {
  _call: CreateNewPhotoNFTCall;

  constructor(call: CreateNewPhotoNFTCall) {
    this._call = call;
  }

  get nftName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get nftSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get photoPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get ipfsHashOfPhoto(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreateNewPhotoNFTCall__Outputs {
  _call: CreateNewPhotoNFTCall;

  constructor(call: CreateNewPhotoNFTCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
