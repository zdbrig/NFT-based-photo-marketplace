// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TransactionPhotoNFTOwnershipChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TransactionPhotoNFTOwnershipChanged entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TransactionPhotoNFTOwnershipChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TransactionPhotoNFTOwnershipChanged", id.toString(), this);
  }

  static load(id: string): TransactionPhotoNFTOwnershipChanged | null {
    return store.get(
      "TransactionPhotoNFTOwnershipChanged",
      id
    ) as TransactionPhotoNFTOwnershipChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get adressPhotoNFT(): Bytes {
    let value = this.get("adressPhotoNFT");
    return value.toBytes();
  }

  set adressPhotoNFT(value: Bytes) {
    this.set("adressPhotoNFT", Value.fromBytes(value));
  }

  get photoId(): BigInt {
    let value = this.get("photoId");
    return value.toBigInt();
  }

  set photoId(value: BigInt) {
    this.set("photoId", Value.fromBigInt(value));
  }

  get ownerBeforeOwnershipTransferred(): Bytes {
    let value = this.get("ownerBeforeOwnershipTransferred");
    return value.toBytes();
  }

  set ownerBeforeOwnershipTransferred(value: Bytes) {
    this.set("ownerBeforeOwnershipTransferred", Value.fromBytes(value));
  }

  get ownerAfterOwnershipTransferred(): Bytes {
    let value = this.get("ownerAfterOwnershipTransferred");
    return value.toBytes();
  }

  set ownerAfterOwnershipTransferred(value: Bytes) {
    this.set("ownerAfterOwnershipTransferred", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class TransactionTradeStatusChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TransactionTradeStatusChange entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TransactionTradeStatusChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TransactionTradeStatusChange", id.toString(), this);
  }

  static load(id: string): TransactionTradeStatusChange | null {
    return store.get(
      "TransactionTradeStatusChange",
      id
    ) as TransactionTradeStatusChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): BigInt {
    let value = this.get("address");
    return value.toBigInt();
  }

  set address(value: BigInt) {
    this.set("address", Value.fromBigInt(value));
  }

  get status(): Bytes {
    let value = this.get("status");
    return value.toBytes();
  }

  set status(value: Bytes) {
    this.set("status", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class AllTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AllTransaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AllTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AllTransaction", id.toString(), this);
  }

  static load(id: string): AllTransaction | null {
    return store.get("AllTransaction", id) as AllTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): BigInt {
    let value = this.get("address");
    return value.toBigInt();
  }

  set address(value: BigInt) {
    this.set("address", Value.fromBigInt(value));
  }

  get status(): Bytes {
    let value = this.get("status");
    return value.toBytes();
  }

  set status(value: Bytes) {
    this.set("status", Value.fromBytes(value));
  }

  get adressPhotoNFT(): Bytes {
    let value = this.get("adressPhotoNFT");
    return value.toBytes();
  }

  set adressPhotoNFT(value: Bytes) {
    this.set("adressPhotoNFT", Value.fromBytes(value));
  }

  get photoId(): BigInt {
    let value = this.get("photoId");
    return value.toBigInt();
  }

  set photoId(value: BigInt) {
    this.set("photoId", Value.fromBigInt(value));
  }

  get ownerBeforeOwnershipTransferred(): Bytes {
    let value = this.get("ownerBeforeOwnershipTransferred");
    return value.toBytes();
  }

  set ownerBeforeOwnershipTransferred(value: Bytes) {
    this.set("ownerBeforeOwnershipTransferred", Value.fromBytes(value));
  }

  get ownerAfterOwnershipTransferred(): Bytes {
    let value = this.get("ownerAfterOwnershipTransferred");
    return value.toBytes();
  }

  set ownerAfterOwnershipTransferred(value: Bytes) {
    this.set("ownerAfterOwnershipTransferred", Value.fromBytes(value));
  }

  get typeEvent(): string {
    let value = this.get("typeEvent");
    return value.toString();
  }

  set typeEvent(value: string) {
    this.set("typeEvent", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get tradeStatusChange(): Array<string | null> {
    let value = this.get("tradeStatusChange");
    return value.toStringArray();
  }

  set tradeStatusChange(value: Array<string | null>) {
    this.set("tradeStatusChange", Value.fromStringArray(value));
  }

  get AllphotoNft(): Array<string | null> {
    let value = this.get("AllphotoNft");
    return value.toStringArray();
  }

  set AllphotoNft(value: Array<string | null>) {
    this.set("AllphotoNft", Value.fromStringArray(value));
  }
}
