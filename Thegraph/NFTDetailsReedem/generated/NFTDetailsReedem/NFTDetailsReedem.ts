// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DetailsRedeem extends ethereum.Event {
  get params(): DetailsRedeem__Params {
    return new DetailsRedeem__Params(this);
  }
}

export class DetailsRedeem__Params {
  _event: DetailsRedeem;

  constructor(event: DetailsRedeem) {
    this._event = event;
  }

  get photoNft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get city(): string {
    return this._event.parameters[2].value.toString();
  }

  get firstLine(): string {
    return this._event.parameters[3].value.toString();
  }

  get secondLine(): string {
    return this._event.parameters[4].value.toString();
  }

  get codePostal(): string {
    return this._event.parameters[5].value.toString();
  }

  get country(): string {
    return this._event.parameters[6].value.toString();
  }

  get addressEmail(): string {
    return this._event.parameters[7].value.toString();
  }
}

export class NFTDetailsReedem__allDetailsReedemResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: string;
  value4: string;
  value5: string;
  value6: string;
  value7: string;

  constructor(
    value0: Address,
    value1: string,
    value2: string,
    value3: string,
    value4: string,
    value5: string,
    value6: string,
    value7: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromString(this.value7));
    return map;
  }
}

export class NFTDetailsReedem__getPhotoByNFTAddressResult_photoStruct extends ethereum.Tuple {
  get photoNFT(): Address {
    return this[0].toAddress();
  }

  get name(): string {
    return this[1].toString();
  }

  get city(): string {
    return this[2].toString();
  }

  get firstLine(): string {
    return this[3].toString();
  }

  get codePostal(): string {
    return this[4].toString();
  }

  get secondLine(): string {
    return this[5].toString();
  }

  get country(): string {
    return this[6].toString();
  }

  get addressEmail(): string {
    return this[7].toString();
  }
}

export class NFTDetailsReedem__getAllDetailsReedemResult_detailsRedeemStruct extends ethereum.Tuple {
  get photoNFT(): Address {
    return this[0].toAddress();
  }

  get name(): string {
    return this[1].toString();
  }

  get city(): string {
    return this[2].toString();
  }

  get firstLine(): string {
    return this[3].toString();
  }

  get codePostal(): string {
    return this[4].toString();
  }

  get secondLine(): string {
    return this[5].toString();
  }

  get country(): string {
    return this[6].toString();
  }

  get addressEmail(): string {
    return this[7].toString();
  }
}

export class NFTDetailsReedem extends ethereum.SmartContract {
  static bind(address: Address): NFTDetailsReedem {
    return new NFTDetailsReedem("NFTDetailsReedem", address);
  }

  allDetailsReedem(param0: BigInt): NFTDetailsReedem__allDetailsReedemResult {
    let result = super.call(
      "allDetailsReedem",
      "allDetailsReedem(uint256):(address,string,string,string,string,string,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NFTDetailsReedem__allDetailsReedemResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
      result[5].toString(),
      result[6].toString(),
      result[7].toString()
    );
  }

  try_allDetailsReedem(
    param0: BigInt
  ): ethereum.CallResult<NFTDetailsReedem__allDetailsReedemResult> {
    let result = super.tryCall(
      "allDetailsReedem",
      "allDetailsReedem(uint256):(address,string,string,string,string,string,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTDetailsReedem__allDetailsReedemResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
        value[5].toString(),
        value[6].toString(),
        value[7].toString()
      )
    );
  }

  photoAddresses(param0: BigInt): Address {
    let result = super.call(
      "photoAddresses",
      "photoAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_photoAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "photoAddresses",
      "photoAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  saveMetadataOfPhotoNFT(
    _photoNFT: Address,
    _name: string,
    _city: string,
    _firstLine: string,
    _secondLine: string,
    _codePostal: string,
    _country: string,
    _addressEmail: string
  ): boolean {
    let result = super.call(
      "saveMetadataOfPhotoNFT",
      "saveMetadataOfPhotoNFT(address,string,string,string,string,string,string,string):(bool)",
      [
        ethereum.Value.fromAddress(_photoNFT),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_city),
        ethereum.Value.fromString(_firstLine),
        ethereum.Value.fromString(_secondLine),
        ethereum.Value.fromString(_codePostal),
        ethereum.Value.fromString(_country),
        ethereum.Value.fromString(_addressEmail)
      ]
    );

    return result[0].toBoolean();
  }

  try_saveMetadataOfPhotoNFT(
    _photoNFT: Address,
    _name: string,
    _city: string,
    _firstLine: string,
    _secondLine: string,
    _codePostal: string,
    _country: string,
    _addressEmail: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "saveMetadataOfPhotoNFT",
      "saveMetadataOfPhotoNFT(address,string,string,string,string,string,string,string):(bool)",
      [
        ethereum.Value.fromAddress(_photoNFT),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_city),
        ethereum.Value.fromString(_firstLine),
        ethereum.Value.fromString(_secondLine),
        ethereum.Value.fromString(_codePostal),
        ethereum.Value.fromString(_country),
        ethereum.Value.fromString(_addressEmail)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getPhotoByNFTAddress(
    photoNFT: Address
  ): NFTDetailsReedem__getPhotoByNFTAddressResult_photoStruct {
    let result = super.call(
      "getPhotoByNFTAddress",
      "getPhotoByNFTAddress(address):((address,string,string,string,string,string,string,string))",
      [ethereum.Value.fromAddress(photoNFT)]
    );

    return result[0].toTuple() as NFTDetailsReedem__getPhotoByNFTAddressResult_photoStruct;
  }

  try_getPhotoByNFTAddress(
    photoNFT: Address
  ): ethereum.CallResult<
    NFTDetailsReedem__getPhotoByNFTAddressResult_photoStruct
  > {
    let result = super.tryCall(
      "getPhotoByNFTAddress",
      "getPhotoByNFTAddress(address):((address,string,string,string,string,string,string,string))",
      [ethereum.Value.fromAddress(photoNFT)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as NFTDetailsReedem__getPhotoByNFTAddressResult_photoStruct
    );
  }

  getAllDetailsReedem(): Array<
    NFTDetailsReedem__getAllDetailsReedemResult_detailsRedeemStruct
  > {
    let result = super.call(
      "getAllDetailsReedem",
      "getAllDetailsReedem():((address,string,string,string,string,string,string,string)[])",
      []
    );

    return result[0].toTupleArray<
      NFTDetailsReedem__getAllDetailsReedemResult_detailsRedeemStruct
    >();
  }

  try_getAllDetailsReedem(): ethereum.CallResult<
    Array<NFTDetailsReedem__getAllDetailsReedemResult_detailsRedeemStruct>
  > {
    let result = super.tryCall(
      "getAllDetailsReedem",
      "getAllDetailsReedem():((address,string,string,string,string,string,string,string)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        NFTDetailsReedem__getAllDetailsReedemResult_detailsRedeemStruct
      >()
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SaveMetadataOfPhotoNFTCall extends ethereum.Call {
  get inputs(): SaveMetadataOfPhotoNFTCall__Inputs {
    return new SaveMetadataOfPhotoNFTCall__Inputs(this);
  }

  get outputs(): SaveMetadataOfPhotoNFTCall__Outputs {
    return new SaveMetadataOfPhotoNFTCall__Outputs(this);
  }
}

export class SaveMetadataOfPhotoNFTCall__Inputs {
  _call: SaveMetadataOfPhotoNFTCall;

  constructor(call: SaveMetadataOfPhotoNFTCall) {
    this._call = call;
  }

  get _photoNFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _city(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _firstLine(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _secondLine(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _codePostal(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _country(): string {
    return this._call.inputValues[6].value.toString();
  }

  get _addressEmail(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class SaveMetadataOfPhotoNFTCall__Outputs {
  _call: SaveMetadataOfPhotoNFTCall;

  constructor(call: SaveMetadataOfPhotoNFTCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
